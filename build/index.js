var _, defaults, log, lsr, sourceClientDirectoryPath, sourceDirectoryPath, sourceServerDirectoryPath, targetClientDirectoryPath, targetDirectoryPath, targetServerDirectoryPath, testDirectoryPath;

_ = require("lodash");

lsr = require("lsr");

log = require("./lib/log");

sourceDirectoryPath = "src";

targetDirectoryPath = "build";

testDirectoryPath = "test";

sourceClientDirectoryPath = `${sourceDirectoryPath}/client`;

sourceServerDirectoryPath = `${sourceDirectoryPath}/server`;

targetClientDirectoryPath = `${targetDirectoryPath}/client`;

targetServerDirectoryPath = `${targetDirectoryPath}/server`;

defaults = {
  bundle: {
    enabled: true,
    sourcemaps: true,
    externals: [],
    vendor: {
      entry: `${sourceClientDirectoryPath}/js/vendor/vendor.coffee`,
      target: `${targetClientDirectoryPath}/js`,
      bundle: "vendor.bundle.js",
      source: `${sourceClientDirectoryPath}/js/app/vendor`
    },
    app: {
      entry: `${sourceClientDirectoryPath}/js/app/app.coffee`,
      target: `${targetClientDirectoryPath}/js`,
      bundle: "app.bundle.js",
      paths: [`${sourceClientDirectoryPath}/js/app`],
      extensions: [".coffee", ".jade", ".cjsx"],
      transforms: ["coffee-reactify", "pugify"]
    }
  },
  clean: {
    enabled: true,
    targetDirectoryPath: targetDirectoryPath,
    clientDirectoryPath: targetClientDirectoryPath,
    serverDirectoryPath: targetServerDirectoryPath
  },
  coffee: {
    enabled: true,
    sourceDirectoryPath: sourceServerDirectoryPath,
    targetDirectoryPath: targetServerDirectoryPath
  },
  copy: {
    enabled: true,
    excluded: ["**/*.coffee", "**/*.less", "**/*.cjsx", "src/client/js{,/**}"],
    sourceDirectoryPath: sourceDirectoryPath,
    targetDirectoryPath: targetDirectoryPath
  },
  documentation: {
    enabled: true,
    sourceDirectoryPath: sourceDirectoryPath,
    targetDirectoryPath: targetDirectoryPath
  },
  less: {
    enabled: true,
    theme: false,
    sourceDirectoryPath: `${sourceClientDirectoryPath}/less`,
    targetDirectoryPath: `${targetClientDirectoryPath}/css`
  },
  livereload: {
    enabled: true
  },
  nodemon: {
    enabled: true,
    entryFilePath: "app.js",
    watchGlob: [`${targetServerDirectoryPath}/**/*`],
    extra: ["cfg.js", "app.js", "gulpfile.coffee"],
    extensions: ["js", "jade"]
  },
  forever: {
    enabled: false,
    entryFilePath: "app.js",
    watchDirectoryPath: sourceServerDirectoryPath
  },
  tests: {
    enabled: true,
    directoryPath: "test"
  },
  watch: {
    enabled: true,
    sourceDirectoryPath: sourceDirectoryPath,
    testDirectoryPath: testDirectoryPath
  }
};

module.exports = function(options = {}) {
  var env, i, len, ref, results, stat;
  env = {};
  if (process.env.APP_THEME) {
    env.less = {
      theme: process.env.APP_THEME
    };
  }
  ref = lsr.lsrSync(`${__dirname}/tasks`);
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    stat = ref[i];
    if (stat.isDirectory()) {
      continue;
    }
    results.push(require(stat.fullPath)(_.merge(defaults, options, env)));
  }
  return results;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLENBQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSx5QkFBQSxFQUFBLG1CQUFBLEVBQUEseUJBQUEsRUFBQSx5QkFBQSxFQUFBLG1CQUFBLEVBQUEseUJBQUEsRUFBQTs7QUFBQSxDQUFBLEdBQU0sT0FBQSxDQUFRLFFBQVI7O0FBQ04sR0FBQSxHQUFNLE9BQUEsQ0FBUSxLQUFSOztBQUVOLEdBQUEsR0FBTSxPQUFBLENBQVEsV0FBUjs7QUFFTixtQkFBQSxHQUE0Qjs7QUFDNUIsbUJBQUEsR0FBNEI7O0FBQzVCLGlCQUFBLEdBQTRCOztBQUM1Qix5QkFBQSxHQUE0QixDQUFBLENBQUEsQ0FBRyxtQkFBSCxDQUF1QixPQUF2Qjs7QUFDNUIseUJBQUEsR0FBNEIsQ0FBQSxDQUFBLENBQUcsbUJBQUgsQ0FBdUIsT0FBdkI7O0FBQzVCLHlCQUFBLEdBQTRCLENBQUEsQ0FBQSxDQUFHLG1CQUFILENBQXVCLE9BQXZCOztBQUM1Qix5QkFBQSxHQUE0QixDQUFBLENBQUEsQ0FBRyxtQkFBSCxDQUF1QixPQUF2Qjs7QUFFNUIsUUFBQSxHQUNDO0VBQUEsTUFBQSxFQUNDO0lBQUEsT0FBQSxFQUFZLElBQVo7SUFDQSxVQUFBLEVBQVksSUFEWjtJQUVBLFNBQUEsRUFBWSxFQUZaO0lBR0EsTUFBQSxFQUNFO01BQUEsS0FBQSxFQUFRLENBQUEsQ0FBQSxDQUFHLHlCQUFILENBQTZCLHdCQUE3QixDQUFSO01BQ0EsTUFBQSxFQUFRLENBQUEsQ0FBQSxDQUFHLHlCQUFILENBQTZCLEdBQTdCLENBRFI7TUFFQSxNQUFBLEVBQVEsa0JBRlI7TUFHQSxNQUFBLEVBQVEsQ0FBQSxDQUFBLENBQUcseUJBQUgsQ0FBNkIsY0FBN0I7SUFIUixDQUpGO0lBUUEsR0FBQSxFQUNFO01BQUEsS0FBQSxFQUFZLENBQUEsQ0FBQSxDQUFHLHlCQUFILENBQTZCLGtCQUE3QixDQUFaO01BQ0EsTUFBQSxFQUFZLENBQUEsQ0FBQSxDQUFHLHlCQUFILENBQTZCLEdBQTdCLENBRFo7TUFFQSxNQUFBLEVBQVksZUFGWjtNQUdBLEtBQUEsRUFBWSxDQUFFLENBQUEsQ0FBQSxDQUFHLHlCQUFILENBQTZCLE9BQTdCLENBQUYsQ0FIWjtNQUlBLFVBQUEsRUFBWSxDQUFFLFNBQUYsRUFBYSxPQUFiLEVBQXNCLE9BQXRCLENBSlo7TUFLQSxVQUFBLEVBQVksQ0FBRSxpQkFBRixFQUFxQixRQUFyQjtJQUxaO0VBVEYsQ0FERDtFQWlCQSxLQUFBLEVBQ0M7SUFBQSxPQUFBLEVBQXFCLElBQXJCO0lBQ0EsbUJBQUEsRUFBcUIsbUJBRHJCO0lBRUEsbUJBQUEsRUFBcUIseUJBRnJCO0lBR0EsbUJBQUEsRUFBcUI7RUFIckIsQ0FsQkQ7RUF1QkEsTUFBQSxFQUNDO0lBQUEsT0FBQSxFQUFxQixJQUFyQjtJQUNBLG1CQUFBLEVBQXFCLHlCQURyQjtJQUVBLG1CQUFBLEVBQXFCO0VBRnJCLENBeEJEO0VBNEJBLElBQUEsRUFDQztJQUFBLE9BQUEsRUFBcUIsSUFBckI7SUFDQSxRQUFBLEVBQXFCLENBQUUsYUFBRixFQUFpQixXQUFqQixFQUE4QixXQUE5QixFQUEyQyxxQkFBM0MsQ0FEckI7SUFFQSxtQkFBQSxFQUFxQixtQkFGckI7SUFHQSxtQkFBQSxFQUFxQjtFQUhyQixDQTdCRDtFQWtDQSxhQUFBLEVBQ0M7SUFBQSxPQUFBLEVBQXFCLElBQXJCO0lBQ0EsbUJBQUEsRUFBcUIsbUJBRHJCO0lBRUEsbUJBQUEsRUFBcUI7RUFGckIsQ0FuQ0Q7RUF1Q0EsSUFBQSxFQUNDO0lBQUEsT0FBQSxFQUFxQixJQUFyQjtJQUNBLEtBQUEsRUFBcUIsS0FEckI7SUFFQSxtQkFBQSxFQUFxQixDQUFBLENBQUEsQ0FBRyx5QkFBSCxDQUE2QixLQUE3QixDQUZyQjtJQUdBLG1CQUFBLEVBQXFCLENBQUEsQ0FBQSxDQUFHLHlCQUFILENBQTZCLElBQTdCO0VBSHJCLENBeENEO0VBNkNBLFVBQUEsRUFDQztJQUFBLE9BQUEsRUFBcUI7RUFBckIsQ0E5Q0Q7RUFnREEsT0FBQSxFQUNDO0lBQUEsT0FBQSxFQUFxQixJQUFyQjtJQUNBLGFBQUEsRUFBcUIsUUFEckI7SUFFQSxTQUFBLEVBQXFCLENBQUUsQ0FBQSxDQUFBLENBQUcseUJBQUgsQ0FBNkIsS0FBN0IsQ0FBRixDQUZyQjtJQUdBLEtBQUEsRUFBcUIsQ0FBRSxRQUFGLEVBQVksUUFBWixFQUFzQixpQkFBdEIsQ0FIckI7SUFJQSxVQUFBLEVBQXFCLENBQUUsSUFBRixFQUFRLE1BQVI7RUFKckIsQ0FqREQ7RUF1REEsT0FBQSxFQUNDO0lBQUEsT0FBQSxFQUFxQixLQUFyQjtJQUNBLGFBQUEsRUFBcUIsUUFEckI7SUFFQSxrQkFBQSxFQUFxQjtFQUZyQixDQXhERDtFQTREQSxLQUFBLEVBQ0M7SUFBQSxPQUFBLEVBQXFCLElBQXJCO0lBQ0EsYUFBQSxFQUFxQjtFQURyQixDQTdERDtFQWdFQSxLQUFBLEVBQ0M7SUFBQSxPQUFBLEVBQXFCLElBQXJCO0lBQ0EsbUJBQUEsRUFBcUIsbUJBRHJCO0lBRUEsaUJBQUEsRUFBcUI7RUFGckI7QUFqRUQ7O0FBcUVELE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFFBQUEsQ0FBQyxVQUFVLENBQUEsQ0FBWCxDQUFBO0FBQ2hCLE1BQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtFQUFBLEdBQUEsR0FBTSxDQUFBO0VBQ04sSUFBMkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUF2RDtJQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVc7TUFBQSxLQUFBLEVBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUFuQixFQUFYOztBQUVBO0FBQUE7RUFBQSxLQUFBLHFDQUFBOztJQUNDLElBQVksSUFBSSxDQUFDLFdBQUwsQ0FBQSxDQUFaO0FBQUEsZUFBQTs7aUJBQ0EsT0FBQSxDQUFRLElBQUksQ0FBQyxRQUFiLENBQUEsQ0FBdUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxRQUFSLEVBQWtCLE9BQWxCLEVBQTJCLEdBQTNCLENBQXZCO0VBRkQsQ0FBQTs7QUFKZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJfICAgPSByZXF1aXJlIFwibG9kYXNoXCJcbmxzciA9IHJlcXVpcmUgXCJsc3JcIlxuXG5sb2cgPSByZXF1aXJlIFwiLi9saWIvbG9nXCJcblxuc291cmNlRGlyZWN0b3J5UGF0aCAgICAgICA9IFwic3JjXCJcbnRhcmdldERpcmVjdG9yeVBhdGggICAgICAgPSBcImJ1aWxkXCJcbnRlc3REaXJlY3RvcnlQYXRoICAgICAgICAgPSBcInRlc3RcIlxuc291cmNlQ2xpZW50RGlyZWN0b3J5UGF0aCA9IFwiI3tzb3VyY2VEaXJlY3RvcnlQYXRofS9jbGllbnRcIlxuc291cmNlU2VydmVyRGlyZWN0b3J5UGF0aCA9IFwiI3tzb3VyY2VEaXJlY3RvcnlQYXRofS9zZXJ2ZXJcIlxudGFyZ2V0Q2xpZW50RGlyZWN0b3J5UGF0aCA9IFwiI3t0YXJnZXREaXJlY3RvcnlQYXRofS9jbGllbnRcIlxudGFyZ2V0U2VydmVyRGlyZWN0b3J5UGF0aCA9IFwiI3t0YXJnZXREaXJlY3RvcnlQYXRofS9zZXJ2ZXJcIlxuXG5kZWZhdWx0cyA9XG5cdGJ1bmRsZTpcblx0XHRlbmFibGVkOiAgICB0cnVlXG5cdFx0c291cmNlbWFwczogdHJ1ZVxuXHRcdGV4dGVybmFsczogIFtdXG5cdFx0dmVuZG9yOlxuXHRcdFx0XHRlbnRyeTogIFwiI3tzb3VyY2VDbGllbnREaXJlY3RvcnlQYXRofS9qcy92ZW5kb3IvdmVuZG9yLmNvZmZlZVwiXG5cdFx0XHRcdHRhcmdldDogXCIje3RhcmdldENsaWVudERpcmVjdG9yeVBhdGh9L2pzXCJcblx0XHRcdFx0YnVuZGxlOiBcInZlbmRvci5idW5kbGUuanNcIlxuXHRcdFx0XHRzb3VyY2U6IFwiI3tzb3VyY2VDbGllbnREaXJlY3RvcnlQYXRofS9qcy9hcHAvdmVuZG9yXCJcblx0XHRhcHA6XG5cdFx0XHRcdGVudHJ5OiAgICAgIFwiI3tzb3VyY2VDbGllbnREaXJlY3RvcnlQYXRofS9qcy9hcHAvYXBwLmNvZmZlZVwiXG5cdFx0XHRcdHRhcmdldDogICAgIFwiI3t0YXJnZXRDbGllbnREaXJlY3RvcnlQYXRofS9qc1wiXG5cdFx0XHRcdGJ1bmRsZTogICAgIFwiYXBwLmJ1bmRsZS5qc1wiXG5cdFx0XHRcdHBhdGhzOiAgICAgIFsgXCIje3NvdXJjZUNsaWVudERpcmVjdG9yeVBhdGh9L2pzL2FwcFwiIF1cblx0XHRcdFx0ZXh0ZW5zaW9uczogWyBcIi5jb2ZmZWVcIiwgXCIuamFkZVwiLCBcIi5janN4XCIgXVxuXHRcdFx0XHR0cmFuc2Zvcm1zOiBbIFwiY29mZmVlLXJlYWN0aWZ5XCIsIFwicHVnaWZ5XCIgXVxuXG5cdGNsZWFuOlxuXHRcdGVuYWJsZWQ6ICAgICAgICAgICAgIHRydWVcblx0XHR0YXJnZXREaXJlY3RvcnlQYXRoOiB0YXJnZXREaXJlY3RvcnlQYXRoXG5cdFx0Y2xpZW50RGlyZWN0b3J5UGF0aDogdGFyZ2V0Q2xpZW50RGlyZWN0b3J5UGF0aFxuXHRcdHNlcnZlckRpcmVjdG9yeVBhdGg6IHRhcmdldFNlcnZlckRpcmVjdG9yeVBhdGhcblxuXHRjb2ZmZWU6XG5cdFx0ZW5hYmxlZDogICAgICAgICAgICAgdHJ1ZVxuXHRcdHNvdXJjZURpcmVjdG9yeVBhdGg6IHNvdXJjZVNlcnZlckRpcmVjdG9yeVBhdGhcblx0XHR0YXJnZXREaXJlY3RvcnlQYXRoOiB0YXJnZXRTZXJ2ZXJEaXJlY3RvcnlQYXRoXG5cblx0Y29weTpcblx0XHRlbmFibGVkOiAgICAgICAgICAgICB0cnVlXG5cdFx0ZXhjbHVkZWQ6ICAgICAgICAgICAgWyBcIioqLyouY29mZmVlXCIsIFwiKiovKi5sZXNzXCIsIFwiKiovKi5janN4XCIsIFwic3JjL2NsaWVudC9qc3ssLyoqfVwiIF1cblx0XHRzb3VyY2VEaXJlY3RvcnlQYXRoOiBzb3VyY2VEaXJlY3RvcnlQYXRoXG5cdFx0dGFyZ2V0RGlyZWN0b3J5UGF0aDogdGFyZ2V0RGlyZWN0b3J5UGF0aFxuXG5cdGRvY3VtZW50YXRpb246XG5cdFx0ZW5hYmxlZDogICAgICAgICAgICAgdHJ1ZVxuXHRcdHNvdXJjZURpcmVjdG9yeVBhdGg6IHNvdXJjZURpcmVjdG9yeVBhdGhcblx0XHR0YXJnZXREaXJlY3RvcnlQYXRoOiB0YXJnZXREaXJlY3RvcnlQYXRoXG5cblx0bGVzczpcblx0XHRlbmFibGVkOiAgICAgICAgICAgICB0cnVlXG5cdFx0dGhlbWU6ICAgICAgICAgICAgICAgZmFsc2Vcblx0XHRzb3VyY2VEaXJlY3RvcnlQYXRoOiBcIiN7c291cmNlQ2xpZW50RGlyZWN0b3J5UGF0aH0vbGVzc1wiXG5cdFx0dGFyZ2V0RGlyZWN0b3J5UGF0aDogXCIje3RhcmdldENsaWVudERpcmVjdG9yeVBhdGh9L2Nzc1wiXG5cblx0bGl2ZXJlbG9hZDpcblx0XHRlbmFibGVkOiAgICAgICAgICAgICB0cnVlXG5cblx0bm9kZW1vbjpcblx0XHRlbmFibGVkOiAgICAgICAgICAgICB0cnVlLFxuXHRcdGVudHJ5RmlsZVBhdGg6ICAgICAgIFwiYXBwLmpzXCIsXG5cdFx0d2F0Y2hHbG9iOiAgICAgICAgICAgWyBcIiN7dGFyZ2V0U2VydmVyRGlyZWN0b3J5UGF0aH0vKiovKlwiIF1cblx0XHRleHRyYTogICAgICAgICAgICAgICBbIFwiY2ZnLmpzXCIsIFwiYXBwLmpzXCIsIFwiZ3VscGZpbGUuY29mZmVlXCIgXVxuXHRcdGV4dGVuc2lvbnM6ICAgICAgICAgIFsgXCJqc1wiLCBcImphZGVcIiBdXG5cblx0Zm9yZXZlcjpcblx0XHRlbmFibGVkOiAgICAgICAgICAgICBmYWxzZVxuXHRcdGVudHJ5RmlsZVBhdGg6ICAgICAgIFwiYXBwLmpzXCJcblx0XHR3YXRjaERpcmVjdG9yeVBhdGg6ICBzb3VyY2VTZXJ2ZXJEaXJlY3RvcnlQYXRoXG5cblx0dGVzdHM6XG5cdFx0ZW5hYmxlZDogICAgICAgICAgICAgdHJ1ZVxuXHRcdGRpcmVjdG9yeVBhdGg6ICAgICAgIFwidGVzdFwiXG5cblx0d2F0Y2g6XG5cdFx0ZW5hYmxlZDogICAgICAgICAgICAgdHJ1ZVxuXHRcdHNvdXJjZURpcmVjdG9yeVBhdGg6IHNvdXJjZURpcmVjdG9yeVBhdGhcblx0XHR0ZXN0RGlyZWN0b3J5UGF0aDogICB0ZXN0RGlyZWN0b3J5UGF0aFxuXG5tb2R1bGUuZXhwb3J0cyA9IChvcHRpb25zID0ge30pIC0+XG5cdGVudiA9IHt9XG5cdGVudi5sZXNzID0gdGhlbWU6IHByb2Nlc3MuZW52LkFQUF9USEVNRSBpZiBwcm9jZXNzLmVudi5BUFBfVEhFTUVcblxuXHRmb3Igc3RhdCBpbiBsc3IubHNyU3luYyBcIiN7X19kaXJuYW1lfS90YXNrc1wiXG5cdFx0Y29udGludWUgaWYgc3RhdC5pc0RpcmVjdG9yeSgpXG5cdFx0cmVxdWlyZShzdGF0LmZ1bGxQYXRoKSBfLm1lcmdlIGRlZmF1bHRzLCBvcHRpb25zLCBlbnZcbiJdfQ==
